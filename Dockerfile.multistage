# Multi-stage Docker build for production

# Stage 1: Build client
FROM node:18-alpine AS client-builder
WORKDIR /app/client

# Set build environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

COPY client/package*.json ./
RUN npm ci
COPY client/ ./
RUN npm run build

# Stage 2: Setup server
FROM node:18-alpine AS server-builder
WORKDIR /app/server
COPY server/package*.json ./
RUN npm ci --only=production
COPY server/ ./

# Stage 3: Production image
FROM node:18-alpine AS production
RUN apk add --no-cache dumb-init

# Create app user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

WORKDIR /app

# Copy server files
COPY --from=server-builder --chown=nodejs:nodejs /app/server ./server

# Copy client build files
COPY --from=client-builder --chown=nodejs:nodejs /app/client/.next ./client/.next
COPY --from=client-builder --chown=nodejs:nodejs /app/client/public ./client/public
COPY --from=client-builder --chown=nodejs:nodejs /app/client/package*.json ./client/

# Create directories
RUN mkdir -p /app/server/uploads /app/server/logs
RUN chown -R nodejs:nodejs /app

USER nodejs

EXPOSE 8000

ENV NODE_ENV=production
ENV PORT=8000

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node /app/server/healthcheck.js

CMD ["dumb-init", "node", "/app/server/server.js"]